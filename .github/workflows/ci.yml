name: CI - Test Suite

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

# Permissions for coverage reporting
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

      - name: Run tests with coverage
        run: npm run test:coverage || true
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x' && always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          echo "Build successful - dist directory created"

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
      - name: Check test results
        if: needs.test.result == 'failure'
        run: |
          echo "Tests failed!"
          exit 1

      - name: Check build results
        if: needs.build.result == 'failure'
        run: |
          echo "Build failed!"
          exit 1

      - name: All checks passed
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "All checks passed! âœ…"
